#!/usr/bin/perl
#------------------------------------------------------------------------------------------------------------#
#    Idea for this perl script was given by Dr. Anirban Hazra and written by Sudheer Kumar Peddathimmareddy.
#
#    In order to run the calculations working GAMESS is needed. Otherwise can be modified to generate input files
#    with different displacement interval between any two specified groups of atoms.
#
#    The script by default will run the jobs on 16 cores(default). To specify different number of cores an
#    extra command line argument needs to be given which will set the desired number of cores.
#

unless( @ARGV > 4 )
{
    die " USAGE: <input>  <displacement interval(Angs)>  <number of displacements> <lines before cartesian coordinates> <size of starting monomer> <number of cores(optional)>\n";
}

$input_opt = $ARGV[0];
$disp_int = $ARGV[1];
$disp_steps = $ARGV[2];
$lines_before = $ARGV[3];
$size_monomer = $ARGV[4];
if ($ARGV[5] != "")
{
    $cores = $ARGV[5];
}
else
{
    $cores = 16;
}

#
#    The next step removes the '.inp' extension added to the input file.
#

@opt_input = split (/.inp/, $input_opt);
$input = $opt_input[0];
print "\nInput file name will be taken as $input (without the '.inp' extension)!!\n";

#
#    Opening the input file (which needs modification) and storing the lines in arrays.
#
#

open (input_file, "<$input_opt") || die "Can't open the input file !!";

#
#    Saving each line of the input file in an array.
#

@lines = <input_file>;
$line_no= @lines;

#
#    Printing the cartesian coordinates to diff. file. 
#    Not necessary for this particular job.
#    Just to work on the new file rather than the original.
#

open (print_file, ">print_file.inp") || die "Can't write or open print !!";
$a = 0;
$z = $lines_before + $size_monomer;

for ($i = $z; $i < $line_no-1; ++$i)
{
    print print_file "$lines[$i]";
    ++$a;
}

print print_file "\n";

#
#    The next step is to convert the 'dos' format coding of the files to unix format coding.
#

system ("dos2unix print_file.inp");

#------------------------------------------------------------------------------------------------------------#
#
#    Isolating the z-coordinates of the monomer to be translated.
#

#
#    Explanation for following arrays (trying to use multi-dim. arrays).
#    '@monomer' is for storing the (soon be translated) monomer coordinates in an array.
#    '@charge' is for storing the charges of the atoms in the monomer.
#    '@monomer_x/y/z' is for storing x, y & z coordinates of the monomer.
#    '@atoms' is for storing atom names (i.e. C, N ,O ,etc.) of the monomer.
#    '@chunks' is used for the storing purpose.
#

$atoms_no = $a;
@monomer = ();
@charge = ();
@monomer_x = ();
@monomer_y = ();
@monomer_z = ();
@atoms = ();
@chunks = ();

#
#    Opening the file containing monomer coordinates.
#

open (monomer, "<print_file.inp") || die "Can't open monomer coordinates !!";

@monomer = <monomer>;

for ( $i = 0; $i < $atoms_no; ++$i)
{
    @chunks = split ( /\s+/, $monomer[$i]);
    $atoms[$i] = $chunks[1];
    $charge[$i] = $chunks[2];
    $monomer_x[$i] = $chunks[3];
    $monomer_y[$i] = $chunks[4];
    $monomer_z[$i] = $chunks[5];
}

#------------------------------------------------------------------------------------------------------------#

#
#    Making displacements in the z-coordinates of the atoms of monomer.
#

#
#    This is to trans. monomer along postive z-axis (compression).
#

for ($i = 1; $i <= $disp_steps; ++$i)
{
    system ("rm Trans._pos_"."$disp_int"."_"."$i".".inp");
    @displaced_z_pos = @monomer_z ;

    for ($j = 0; $j < $atoms_no; ++$j)
    {
	$displaced_z_pos[$j] = $displaced_z_pos[$j] + ($i * $disp_int);
    }

    open (displaced, ">Trans."."_pos_"."$disp_int"."_"."$i".".inp") || die "Can't create file with displacements !!";
    for ($j = 0; $j < $lines_before - 2; ++$j)
    {
	print displaced "$lines[$j]";
    }
    $s= $i * $disp_int;
    print displaced " Monomer other than the mentioned in command-line trans. by $s angs along pos. direction....SPE using MP2/6-31G(d,p)++\n";
    for ($j = $lines_before - 1; $j < $z; ++$j)
    {
	print displaced "$lines[$j]";
    }

    for ($j = 0; $j < $atoms_no; ++$j)
    {
	print displaced " $atoms[$j]      $charge[$j]    $monomer_x[$j]     $monomer_y[$j]     $displaced_z_pos[$j]\n";
    }
    print displaced "\$end";
    system ("dos2unix Trans._pos_"."$disp_int"."_"."$i".".inp");

#
#    This is to trans. monomer along negative z-axis (expansion).
#

    system ("rm Trans._neg_"."$disp_int"."_"."$i".".inp");
    @displaced_z_neg = @monomer_z ;
    
    for ($j = 0; $j < $atoms_no; ++$j)
    {
	$displaced_z_neg[$j] = $displaced_z_neg[$j] - ($i * $disp_int);
    }

    open (displaced1, ">Trans."."_neg_"."$disp_int"."_"."$i".".inp") || die "Can't create file with displacements !!";
    for ($j = 0; $j < $lines_before - 2; ++$j)
    {
	print displaced1 "$lines[$j]";
    }

    print displaced1 " Monomer other than the mentioned in command-line trans. by $s angs along neg. direction....SPE using MP2/6-31G(d,p)++\n";
    for ($j = $lines_before - 1; $j < $z; ++$j)
    {
	print displaced1 "$lines[$j]";
    }

    for ($j = 0; $j < $atoms_no; ++$j)
    {
	print displaced1 " $atoms[$j]      $charge[$j]    $monomer_x[$j]     $monomer_y[$j]     $displaced_z_neg[$j]\n";
    }
    print displaced1 "\$end";
    system ("dos2unix Trans._neg_"."$disp_int"."_"."$i".".inp");
}

#------------------------------------------------------------------------------------------------------------#

#
#    The following part generates perl script to extract information from the generated log files into an output file.
#    This script will give two outputs. One of them will contain displacements and energies (in Hartrees) and the 
#    other will contain displacement (with corresponding -/+ signs) and energy difference in (KCal/mol) in coordinates form.
#

open (Extract_log, ">Extract_Log_"."$disp_int") || die "Can't generate the extraction script !!";
print Extract_log "#!/usr/bin/perl\n#\n#    This script is generated by a Perl script written by Sudheer.\n#\n";
print Extract_log "#    This program creates an output using the log files generated beforehand in the same folder.\n#\n";
print Extract_log "#    The negative displacement values in the Plot_coordinate file refers to the compression in the base pair\n#    whereas the positive displacement refers to the expansion in the base pair.\n#\n";
print Extract_log "system (\"rm Energy_extract_"."$disp_int".".txt\");\n";
print Extract_log "open (Extract, \">Energy_extract_"."$disp_int".".txt\") || die \"Can't create the output with energies !! \";\n";
print Extract_log "open (Plot, \">Plot_coordinate_"."$disp_int".".txt\") || die \"Can't create the coordinate file for plotting !!\";\n";
print Extract_log "print Extract \"  This file contains the displacements and energies of the displaced base pair.\\n\\n\";\n";
print Extract_log "print Extract \"\\t Sr. No. \\t Input File \\t\\t\\t Displacement (in Angs.) \\t\\t\\t Energy (in Hartrees)\\n\\n\";\n";
print Extract_log "print Extract \"\\t------------------------------------------------------------------------------------------------------------------------------\\t\\n\";\n";
print Extract_log "print Extract \"\\t Optimized dimer (without displacement)\\n\\n\";\n";
print Extract_log "open (Opt, \"<"."$input".".log\") || die \"Can't read the log file of the optimized structure !! \$!\";\n";
print Extract_log "while ( \$line = <Opt> )\n";
print Extract_log "{\n";
print Extract_log "    if ( \$line =~ /E\\(MP2\\)/ )\n";
print Extract_log "    {\n";
print Extract_log "	\@energy_opt = split (/\\s+/, \$line );\n";
print Extract_log "    }\n";
print Extract_log "}\n";
print Extract_log "print Extract \"\\t0 \\t $input\\t\\t\\t\\t 0\\t\\t\\t\\t   \$energy_opt[2] \\n\\n\";\n";
print Extract_log "\@Plot_energy = ();\n";
print Extract_log "\@Plot_disp = ();\n";
print Extract_log "print Extract \"\\t Translation along positive z-axis (compression)!!\\n\\n\";\n";
print Extract_log "for (\$i =1; \$i <= $disp_steps; ++\$i)\n";
print Extract_log "{\n";
print Extract_log "    open (Energy_log_pos, \"<Trans._pos_\".\"$disp_int\".\"_\".\"\$i\".\".log\") || die \"Can't read the log file !! \$!\";\n";
print Extract_log "    while ( \$line = <Energy_log_pos> )\n";
print Extract_log "    {\n";
print Extract_log "	if ( \$line =~ /E\\(MP2\\)/ )\n";
print Extract_log "        {\n";
print Extract_log "	    \@energy_chunk = split (/\\s+/, \$line );\n";
print Extract_log "	}\n";
print Extract_log "    }\n";
print Extract_log "    \$j = \$i * $disp_int;\n";
print Extract_log "    \$Plot_energy[\$i] = (\$energy_chunk[2] - \$energy_opt[2]) * 627.509;\n";
print Extract_log "    \$Plot_disp[\$i] = -1 * \$j;\n";
print Extract_log "    print Extract \"\\t\$i \\t Trans._pos_\".\"$disp_int\".\"_\$i\".\" \\t\\t\\t\\t \$j\\t\\t\\t\\t\\t   \$energy_chunk[2] \\n\\n\";\n";
print Extract_log "}\n";
print Extract_log "for (\$a = $disp_steps; \$a >=1; --\$a)\n";
print Extract_log "{\n";
print Extract_log "    print Plot \"\$Plot_disp[\$a]\\t \$Plot_energy[\$a]\\n\";\n";
print Extract_log "}\n";
print Extract_log "print Plot \"0.00000\\t 0.000000000000\\n\";\n";
print Extract_log "print Extract \"\\t Translation along negative z-axis (expansion)!!\\n\\n\";\n";
print Extract_log "for (\$k =1; \$k <= $disp_steps; ++\$k)\n";
print Extract_log "{\n";
print Extract_log "    open (Energy_log_neg, \"<Trans._neg_\".\"$disp_int\".\"_\".\"\$k\".\".log\") || die \"Can't read the log file !! \$!\";\n";
print Extract_log "    while ( \$line = <Energy_log_neg> )\n";
print Extract_log "    {\n";
print Extract_log "	if (\$line =~ /E\\(MP2\\)/ )\n";
print Extract_log "        {\n";
print Extract_log "	    \@energy_chunk1 = split (/\\s+/, \$line );\n";
print Extract_log "	}\n";
print Extract_log "    }\n";
print Extract_log "    \$j = \$k * $disp_int;\n";
print Extract_log "    \$l = \$k + \$i - 1;\n";
print Extract_log "    \@Plot_energy1 = ();\n";
print Extract_log "    \$Plot_energy1[\$k] = (\$energy_chunk1[2] - \$energy_opt[2]) * 627.509;\n";
print Extract_log "    \@Plot_disp1 = ();\n";
print Extract_log "    \$Plot_disp1[\$k] = \$j;\n";
print Extract_log "    print Extract \"\\t\$l \\t Trans._neg_\".\"$disp_int\".\"_\$k\".\" \\t\\t\\t\\t \$j\\t\\t\\t\\t\\t   \$energy_chunk1[2] \\n\\n\";\n";
print Extract_log "    print Plot \"\$Plot_disp1[\$k]\\t \$Plot_energy1[\$k]\\n\";\n";
print Extract_log "}\n";
print Extract_log "exit\n";
system ("chmod u+x Extract_Log_"."$disp_int");

#------------------------------------------------------------------------------------------------------------#

#
#    Submitting parallel job to GAMESS using PBS script.
#

#
#    The following steps creates the necessary PBS script to run the jobs parallely on a cluster which
#    in turn will call the above generated perl script for extraction after finishing the jobs.
#

system ("rm Run_$input"."_"."$disp_int".".sh");
open (Run, ">>Run_$input"."_"."$disp_int".".sh") || die "Can't create the bash script !!";
print Run "#!/bin/bash\n";
print Run "#    This script is generated by a program written by Sudheer based on the GMS script used normally by him.\n";
print Run "#    The purpose of this script is to use the previously generated input files for GAMESS SPE job to run in parallel.\n\n";
print Run "#PBS -q default\n";
print Run "#PBS -l nodes=1:ppn=$cores\n\n";
print Run "export I_MPI_DEVICE=rdma:OpenIB-cma\n";
print Run "cd \$PBS_O_WORKDIR\nexport BASE=\$PBS_O_WORKDIR\n\n";
print Run "#    The first run is for the input file given as user input.\n\n";
print Run "export JOB=$input \n";
print Run "export EXEC=/share/apps/gamess_2013_ifort/gamess/rungms_old_working\n";
print Run "JOBNAME=\${JOB}.\$PBS_JOBID\n";
print Run "echo 'Jobname is' \$JOBNAME\n";
print Run "#PBS -N \$JOBNAME\n";
print Run "export SCRDIR=/state/partition1/scr/\$PBS_JOBID\n";
print Run "mkdir \$SCRDIR\n";
print Run "cd \$SCRDIR\n";
print Run "scp \$PBS_O_WORKDIR/\${JOB}.inp .\n";
print Run "echo \">\"\n";
print Run "echo \"Running \" \$EXEC \" on \" `cat \$PBS_NODEFILE`\n";
print Run "time \$EXEC \${JOB} 00 $cores > \${JOB}.log\n";
print Run "echo \"Done!\"\n";
print Run "echo \".\"\n\n";
print Run "#    The following lines are to run jobs one after another in the same order that the were files generated.\n";
for ($i = 1; $i <= $disp_steps; ++$i)
{
    print Run "#    This is for pos. trans. of $i times $disp_int angs.\n\n";
    print Run "export JOB=Trans._pos_"."$disp_int"."_"."$i\n";
    print Run "export EXEC=/share/apps/gamess_2013_ifort/gamess/rungms_old_working\n";
    print Run "JOBNAME=\${JOB}.\$PBS_JOBID\necho 'Jobname is' \$JOBNAME\n";
    print Run "#PBS -N \$JOBNAME\n";
    print Run "export SCRDIR=/state/partition1/scr/\$PBS_JOBID\nmkdir \$SCRDIR\ncd \$SCRDIR\n";
    print Run "scp \$PBS_O_WORKDIR/\${JOB}.inp .\n";
    print Run "echo \">\"\n";
    print Run "echo \"Running \" \$EXEC \" on \" `cat \$PBS_NODEFILE`\n";
    print Run "time \$EXEC \${JOB} 00 $cores > \${JOB}.log\n";
    print Run "echo \"Done!\"\n";
    print Run "echo \".\"\n\n";
    print Run "#    The following is for neg. trans. of $i times $disp_int angs.\n\n";
    print Run "export JOB=Trans._neg_"."$disp_int"."_"."$i\n";
    print Run "export EXEC=/share/apps/gamess_2013_ifort/gamess/rungms_old_working\n";
    print Run "JOBNAME=\${JOB}.\$PBS_JOBID\necho 'Jobname is' \$JOBNAME\n";
    print Run "#PBS -N \$JOBNAME\n";
    print Run "export SCRDIR=/state/partition1/scr/\$PBS_JOBID\nmkdir \$SCRDIR\ncd \$SCRDIR\n\n";
    print Run "scp \$PBS_O_WORKDIR/\${JOB}.inp .\n";
    print Run "echo \">\"\n";
    print Run "echo \"Running \" \$EXEC \" on \" `cat \$PBS_NODEFILE`\n";
    print Run "time \$EXEC \${JOB} 00 $cores > \${JOB}.log\n";
    print Run "echo \"Done!\"\n";
    print Run "echo \".\"\n\n";
}
print Run "#    Cleaning up the scr dir. and copying the files to working directory.\n";
print Run "tar -cvzf \${PBS_JOBNAME}_\${PBS_JOBID}.tar.gz *\ncp \${PBS_JOBNAME}_\${PBS_JOBID}.tar.gz \$BASE\ncd \$BASE\n";
print Run "rm -rf \$SCRDIR\ntar -zvxf \${PBS_JOBNAME}_\${PBS_JOBID}.tar.gz\nrm \${PBS_JOBNAME}_\${PBS_JOBID}.tar.gz\n";
print Run "\n";
print Run "export EXEC=\$BASE/Extract_Log_"."$disp_int\n";
print Run "time \$EXEC > Extract_Log_"."$disp_int".".log\n";
system ("chmod u+x Run_"."$disp_int".".sh");
system ("qsub Run_$input"."_"."$disp_int".".sh");
system ("rm print_file.inp");
exit
